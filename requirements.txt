======================================
Gilded Rose Requirements Specification
======================================

Hi and welcome to team Gilded Rose. As you know, we are a small inn with a prime location in a
prominent city ran by a friendly innkeeper named Allison. We also buy and sell only the finest goods.
Unfortunately, our goods are constantly degrading in quality as they approach their sell by date. We
have a system in place that updates our inventory for us. It was developed by a no-nonsense type named
Leeroy, who has moved on to new adventures. Your task is to add the new feature to our system so that
we can begin selling a new category of items. First an introduction to our system:

	- All items have a SellIn value which denotes the number of days we have to sell the item
	- All items have a Quality value which denotes how valuable the item is
	- At the end of each day our system lowers both values for every item

Pretty simple, right? Well this is where it gets interesting:

	- Once the sell by date has passed, Quality degrades twice as fast
	- The Quality of an item is never negative
	- "Aged Brie" actually increases in Quality the older it gets
	- The Quality of an item is never more than 50
	- "Sulfuras", being a legendary item, never has to be sold or decreases in Quality
	- "Backstage passes", like aged brie, increases in Quality as its SellIn value approaches;
	Quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but
	Quality drops to 0 after the concert

We have recently signed a supplier of conjured items. This requires an update to our system:

	- "Conjured" items degrade in Quality twice as fast as normal items

Feel free to make any changes to the updateQuality method and add any new code as long as everything
still works correctly. However, do not alter the class or property names as those belong to the
goblin in the corner who will insta-rage and one-shot you as he doesn't believe in shared code
ownership.


==================================
Wymagania dla Gilded Rose
==================================

Witamy serdecznie w zespole Gilded Rose. Jak wiesz, jesteśmy małym zajazdem usytuowanym w doskonałej lokalizacji w
słynnym mieście. Zajazd prowadzi przyjazna właścicielka o imieniu Allison.
Naszą dewizą jest to, że kupujemy i sprzedajemy tylko najlepsze towary.
Niestety, jakość naszych towarów stale się pogarsza, wraz ze zbliżającą się datą ważności.
Posiadamy program komputerowy, który aktualizuje stan naszego magazynu. Został opracowany przez poważnego gościa o imieniu
Leeroy, który w międzyczasie odszedł poszukując nowych przygód. Twoim zadaniem jest dodanie nowej funkcjonalności do naszego systemu.
Chcemy zacząć sprzedawać nową kategorię produktów. Ale najpierw szybkie wprowadzenie do naszego systemu:

- Wszystkie towary mają termin ważności (SellIn), która określa liczbę dni, w których mamy sprzedać przedmiot
- Wszystkie elementy mają przypisaną właściwość Quality, która określa jak wartościowy jest dany przedmiot
- Pod koniec każdego dnia nasz system obniża obie wartości dla każdego elementu

Całkiem proste, prawda? Cóż, tutaj robi się interesująco:

- Po upływie daty ważności (SellIn=0), Quality pogarsza się dwukrotnie szybciej
- Wartość Quality nigdy nie jest ujemna
- Ser "Aged Brie" zyskuje na wartości (Quality) czym starszy się staje
- Quality nigdy nie przekracza 50
- "Sulfuras", będąc legendarnym towarem, nie ma daty ważności i nigdy nie obniża wartości Quality
- "Backstage pass", jak "Aged Brie", zyskuje na wartości (Quality), gdy zbliża się jego termin ważności (SellIn);
Quality zwiększa się o 2, jeśli jest 10 dni lub mniej dni, a 3, jeśli jest 5 dni lub mniej, ale spada do 0 po koncercie

Niedawno podpisaliśmy dostawcę zaczarowanych przedmiotów ("Conjured" w nazwie). To wymaga aktualizacji naszego systemu:

- produkty zaczarowane obniżają Quality dwukrotnie szybciej niż zwykłe przedmioty

Możesz wprowadzić zmiany do metody updateQuality i dodać dowolny nowy kod tak długo jak wszystko
nadal działa poprawnie. Nie zmieniaj jednak nazw klas lub właściwości, ponieważ należą one
do Goblina. Goblin, który siedzi w rogu pokoju, wpadnie wtedy w szał, gdyż nie wierzy w collective code ownership.

